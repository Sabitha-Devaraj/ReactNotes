React- JS Library - Declarative (ReactDOM manipulates the code) - Components
JS - Imperative (You have write all the code to create a DOM)
Babel - JS compiler - translates older version of JS code into new version 
        JSX is not a valid JS code. Babel transplies JSX into a valid JS code to be compiled by the JS complier.

Setup:
    Install Node.js - JS runtime for serverside programming
        >sudo apt install nodejs
        >node -v
        v10.19.0

    Latest version was not installed while executing this command. To get the lastest version of node I did:
        >sudo npm cache clean -f
        >sudo npm install -g n
        >sudo n latest
        >node -v
        v21.4.0


    Install npm - Nodejs package manager - allows you to install modules and packages to use with Node.js
        >sudo apt install npm
        >npm -v
        6.14.4

    After installing latest version using the above commands
        >npm -v
        10.2.4


    Install Visual Studio Code

    Add React Developer Tools to Chrome
        Go to Chrome Web Store-> Search React Developer Tools -> Add to Chrome

Working with Visual Studio Code:
    Install ES7+ React Extension - Go to Extension-> Search ES7 react -> Install

    Enable Emmet to inlcuce the languages that are not supported by default - Go to File->Preferences->Online Services Settings->Search emmet
        Add javascript to key and javascriptreact to value

Project:
1. Open folder to workspace
2. Open terminal
3. create react app
    >npx create-react-app <appname> //name should not have capital letters
    >cd <appname>
    >npm start //connects to development server

ReactDOM - rendereing API that renders JSX directly to the HTML DOM

How JSX is different from HTML
    1. className are not defined as class as it is a reserved word in JS. (Use camelCase for events as well)
    2. JSX uses self closing tag and must be closed. eg: <br /> and not <br> as used in HTML

Functional Components
    There are 2 ways to create React Components:
        1. Using JS functions - creates a stateless Functional Component

            A stateless functional component is any function you write which accepts props and returns JSX. 
    
        2. A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). 
    
    A stateful component is a class component that does maintain its own internal state. Stateful components referred to simply as components or React components.

    Components are reusable piece of code. They are nothing but JS functions.
    In React, every concept is written as a seperate component and combined together to buid an UI

Styling
    It is a good practice to have seperate css for each component. It will be helpful in case of big projects.

ClickEvents
    Anonymous function - use this while calling a function in the attribute as the function will be called only on a event. If not the function will be executed on page load
    <button onClick={(e)=>handleClick(e)}>Click Here</button>

Hook (https://react.dev/reference/react/hooks)
    Hooks are built-in React functions that let you use different React features from function component(cannot be written in class) and at top level(not inside loop, conditions and nested functions).
    Its the React way of thinking. To display the result of an event without reloading the enitre page.
    
Different types of Hooks
    1. State Hooks - lets a component remember information like user input. eg. a form component can store user input using state hook.
        useState - declares a state variable that you can update directly (returns a stateful value and a function to update it)
        useReducer - declares a state variable that with update logic inside a reducer function

    2. Ref Hooks - lets a component hold some information that is not used for rendering (like DOM node or timeout ID). Updating ref does not re render your component. Also known as "escape hatch" from react paradigm
        useRef - holds some value, most often DOM node
        useImperativeHandle - lets you customize the ref exposed by your component. It is rarely used.
    
    3. Effect Hooks - Lets a component connect to and synchronize with the external system like network, browser DOM, animations, APIs etc. It is activated by default after the first render and each time the state changes.
        useEffect - connects a component to an external system
        Do not use this hook if you are not connecting to an external system.

        useEffect(() => {
            firstparam-effect - function //connect to external system
        }, [//second param-dependencies - refer to the state chaange to be handled])
    
        useEffect takes a function as its parameter. If that function
        returns something, it needs to be a cleanup function. Otherwise,
        it should return nothing. If we make it an async function, it
        automatically retuns a promise instead of a function or nothing.
        Therefore, if you want to use async operations inside of useEffect,
        you need to define the function separately inside of the callback
        function.

        eg:
            React.useEffect(() => {
                function watchWidth() {
                    console.log("Setting up...")
                    setWindowWidth(window.innerWidth)
                }
        
                window.addEventListener("resize", watchWidth)
        
                return function() {
                    console.log("Cleaning up...")
                    window.removeEventListener("resize", watchWidth)
                }
            }, [])

        1. What is a "side effect" in React? What are some examples?
        - Any code that affects an outside system.
        - local storage, API, websockets, two states to keep in sync


        2. What is NOT a "side effect" in React? Examples?
        - Anything that React is in charge of.
        - Maintaining state, keeping the UI in sync with the data, 
        render DOM elements


        3. When does React run your useEffect function? When does it NOT run
        the effect function?
        - As soon as the component loads (first render)
        - On every re-render of the component (assuming no dependencies array)
        - Will NOT run the effect when the values of the dependencies in the
        array stay the same between renders


        4. How would you explain what the "dependecies array" is?
        - Second paramter to the useEffect function
        - A way for React to know whether it should re-run the effect function



    4. Context Hooks

    5. Performance Hooks

    6. Resource Hooks
    

useState Hook Sample code

    const Hook = () => {

        /**
     * Note: if you ever need the old value of state
     * to help you determine the new value of state,
     * you should pass a callback function to your
     * state setter function instead of using
     * state directly. This callback function will
     * receive the old value of state as its parameter,
     * which you can then use to determine your new
     * value of state.
     */

        const [count, setCount] = useState(1); //returns a stateful value(count) and a function(setCount) to update it.

        function incrementCount(){
            setCount(count + 1) // So this line should be modified using callback function as mentioned in the Note above.
            //setCount(prevCount => prevCount + 1)
            //setCount(function(){
                return oldValue + 1
            })
        }
    
        return (
            <main>
                <button onClick={()=>setCount(count - 1)}>-</button>
                <span>{count}</span>
                <button onClick={incrementCount}>+</button>
            </main>
        )
    }

List and Keys (https://legacy.reactjs.org/docs/lists-and-keys.html)
Keys help react to identify which items have changed.
    map and filter - higher end functions
        - map creates a new array populated with results of calling a provided function on every element in the parent/ calling array

            const numbers = [1,2,3,4,5]
            const num = numbers.map((n) => n * 2) // function: n * 2 
            console.log(num) // Array [2,4,6,8,10]
       
       - filter creates a shallow copy of a given array with just the elements that pass the test implemented by the provided function
            const numbers = [1,2,3,4,5]
            const num = numbers.filter((n) => n > 2)
            onsole.log(num) // Array [3,4,5]

    <li> list should have key attribute to control the state of element.

React Icons - go to npm js in browser and search for react icon to get required icons

Web Storage API 
    session Storage - object stores data that persists only for that one session and expires when the user closes that browser tab or window. This does not disapper on the reload of a website

    localStorage - object stores data without expiration, even when the user closes the browser tab or window. Browsers do not clean them automatically. Data is lost only when the Javascript clears the content or when the browser's cache is cleared.
    Both are properties of global window object

    built-in interfaces
    1. setItem() 2.getItem() 3. removeItem(), 4. key(), 5. length, 6. clear()

    localStorage.setItem("todo-list",JSON.stringify(listItems)) //accepts 2 strings as argument
    todo-list - storage object
    2nd arg - serialized object 

    serialization - converting javascript object into JSON text, so it can be stored in webstorage object.
    deserialization - converting JSON text to javascript object

    JSON is a text format of interchanging data between client and server.
    JSON object is a global object containing methods to serialize (stringify) and deserialize (parse)

Props and Props drilling

    props - are arguments that are passed into components via HTML attributes. Parent component passes some information to child component using props.
    Passing on this info from parents to child is called drilling.
    
UseRef Hook
    Lets a component hold information that is not used for re-rendering.
    Used this Hook in to-do list application to set focus back to AddItem input field after clicking the add button. Previously the focus was retained in the button.

    import {useRef} from 'react'
    const {inputRef} = useRef()

    create a ref in the input field
    ref = {inputRef}

    use the hook in the button
    inputRef.current.focus (current refers to the ref created in input field)

Fetch API
    Javascript API that allows scripts to make a HTTP request to a external data source. 
    This API returns the data as promises.
    Promise is an object that represents an asynchronous operation.
    Before promise, callbacks and events were used leading to unmanageable code due to multiple callback hell.
    It is a value that will be resolved in the future.
    Outcome is either fulfillment (success) and its associated value or rejection (failure) and an associated reason.

REST (Representational State Transfer) API is that datasource. It allows you to interact with any kind of server over HTTP.

Web API lets you interact with web server through HTTP

Analogy: Fetch API is a bus while REST API is a bus stop.


    using npx while installation doesn't create any dependencies in the project modules.
    Use npm if you need to create dependencies

    Run the below command in new terminal 
        npx json-server -p 3500 -w data/db.json

    This command launches a server with data from db.json. This will be considered as a server for our practice. We will use API to make a request to this server.

    The request can be - GET/ POST(insert)/ PATCH(update)/ DELETE

AXIOS 
    1. Promise based HTTP client.
    2. It is a Javascript library to do HTTP request from web browser or Node.js server
    3. It is better to use Axios than Fetch API when you need a simpler way to work with the response data as it automatically parses the response and returns the data directly (returns the response as JSON).
    While in Fetch, you have to convert the data (returned as promised) to JSON.
    4. It has XSRF (Cross-Site Request Forgery) protection while fetch does not.
    5. It allows cancelling request and request timeout but fetch does not allow.

-> Install axios package using, npm i axios
-> axios.create() lets you create a new instance of Axios with custom config which can be reused by all the calls using that instance.
-> require is the other way to create instance but it doesn't allow custom config

Axios is used for small to mid sized applications and when you need to request data from a single API endpoint.

GRAPHQL is used for larger applications and when you need to request data from multiple sources. It is an API Query Language that defines specifications of how the client should request data from the remote server. Use GRAPHQL in your API calls without relaying on the server side application to define the request.


CRUD operations
    It is an important concept in react as it allows you to organize and manag the data across the web application.

    Create - create a table row/ add data to web page/ add content
    Read - Read or retrieve data from web page
    Update - Update or edit exisitng data in the web page
    Delete - Delete exisitng data from the web page


React Router v6 (https://reactrouter.com/en/main)
    It enables client side routing.
    In traditional websites, browser makes a request for a dcoument fromt the server, downloads and evaluates the CSS and Javascript and renders the HTML from the server.
    When the user makes a new click, requesting another document from the server, browser needs to do the process all over again which is time consuming as it needs to re evaluate CSS and Javascript.
    Instead, client side rounting allows your app to update the URL with  link click and render the new UI and data using fetch without making another request for the document.

Install Router dom: 
    npm i react-router-dom -S

<BrowserRouter>
    It stores the current location in the browsers address bar using clean URL and navigates using the browsers built in history stack
    Place your entire <App/> under <BrowserRouter> in index.js

    Configure your application to run underneath a specific basename in the URL:
       Do this in App.js return ()
            <Routes>
                <Route path="/" element ={}> //this path refers to index.js by default
            </Routes>

<HashRouter>
    Is for use in web browsers when the URL should not be sent to the server for some reason.
    Current location is stored in the hash (#) portion of the current URL, so it is never sent to the server.
    Do not use HashRouter unless it is absolutely required.

<MemoryRouter>
    It stores its location internally in an array, unlike Browser and Hash Routers, it isn't tied to an external source like browsers history stack.
    This makes it ideal when you need complete control over the browsers history stack, like testing.

<StaticRouter>
    Render the react router web app in node.
    Provides the current location via the location property

<Router>
    It is the low level interface that is shared by all the router components.
    It is a context-provider, that provides routing information to the rest of the app

<NativeRouter>
    It is the recommended interface for running react router in the React Native app
    React Native: combining the best parts of native development with React.


useParams() 
    This hook returns an object with key/value pair of dynamic params from the current URL that were matched by the <Route path>


<Outlet>
    This should be used in the parent route element to render their child route element. 
    This allows the nested UI to show up when the child elements are rendered.

useNavigate() Hook
    Returns a function that lets you navigate programmatically.
    
    const navigate = useNavigate()
    navigate('/')

    You can specify "to" as in <Link> or give a delta value like, navigate(-1) which is equivalent to going back one page in the history.

//https://github.com/gitdagray/react_context/tree/main/src

LifeCycle Methods/ Hooks
    React components have several special methods that performs some actions at specific point during the life cycle of a component.
    This can be before they are rendered, before they update, before they receive props, before they unmount, and so on.
    some of the main lifecycle methods: 
    componentWillMount() - API calls and event listeners are added to this method
    componentDidMount() 
    shouldComponentUpdate() 
    componentDidUpdate() 
    componentWillUnmount()


